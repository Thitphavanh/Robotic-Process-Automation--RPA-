"""
AI Summarizer Service - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI
"""
from datetime import datetime, date
from django.utils import timezone
from .models import NewsArticle, DailyReport


class AISummarizerService:
    """Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI"""

    def __init__(self):
        pass

    def summarize_article(self, article):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API ‡∏´‡∏£‡∏∑‡∏≠ Local LLM
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢

        try:
            content = article.content
            title = article.title

            # Basic summarization (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô AI model ‡πÑ‡∏î‡πâ)
            summary = f"{title}\n\n{content[:200]}..."

            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó article
            article.ai_summary = summary
            article.sentiment = self._analyze_sentiment(content)
            article.save()

            return summary

        except Exception as e:
            print(f"Error summarizing article: {e}")
            return None

    def _analyze_sentiment(self, text):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå sentiment ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        # TODO: ‡πÉ‡∏ä‡πâ AI model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sentiment analysis

        positive_words = ['‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏Å‡∏≥‡πÑ‡∏£', '‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 'up', 'gain', 'profit', 'growth']
        negative_words = ['‡∏•‡∏î‡∏•‡∏á', '‡πÅ‡∏¢‡πà‡∏•‡∏á', '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', '‡∏ï‡∏Å', 'down', 'loss', 'decline', 'fall']

        text_lower = text.lower()

        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)

        if positive_count > negative_count:
            return 'positive'
        elif negative_count > positive_count:
            return 'negative'
        else:
            return 'neutral'

    def generate_daily_report(self, report_date=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô"""
        if report_date is None:
            report_date = date.today()

        try:
            # ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á DailyReport
            report, created = DailyReport.objects.get_or_create(
                report_date=report_date
            )

            # ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            today_start = timezone.make_aware(datetime.combine(report_date, datetime.min.time()))
            today_end = timezone.make_aware(datetime.combine(report_date, datetime.max.time()))

            articles = NewsArticle.objects.filter(
                published_at__range=(today_start, today_end)
            )

            # ‡πÅ‡∏¢‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î
            stock_thai_articles = articles.filter(source__category='stock_thai')
            stock_foreign_articles = articles.filter(source__category='stock_foreign')
            crypto_articles = articles.filter(source__category='crypto')
            gold_articles = articles.filter(source__category='gold')
            tech_articles = articles.filter(source__category__in=['tech_ai', 'tech_hardware', 'tech_software'])
            football_articles = articles.filter(source__category='football')

            # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
            report.stock_thai_summary = self._summarize_category(
                stock_thai_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢'
            )

            report.stock_foreign_summary = self._summarize_category(
                stock_foreign_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®'
            )

            report.crypto_summary = self._summarize_category(
                crypto_articles,
                'Bitcoin ‡πÅ‡∏•‡∏∞ Cryptocurrency'
            )

            report.gold_summary = self._summarize_category(
                gold_articles,
                '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥'
            )

            report.tech_summary = self._summarize_category(
                tech_articles,
                '‡∏Ç‡πà‡∏≤‡∏ß Technology'
            )

            report.football_summary = self._summarize_category(
                football_articles,
                '‡∏Ç‡πà‡∏≤‡∏ß Football'
            )

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°
            report.full_report = self._generate_full_report(report)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ report
            report.articles.set(articles)

            report.is_completed = True
            report.save()

            return report

        except Exception as e:
            print(f"Error generating daily report: {e}")
            return None

    def _summarize_category(self, articles, category_name):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        if not articles.exists():
            return f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•{category_name}‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

        summary_parts = [f"üìä {category_name} - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date.today().strftime('%d/%m/%Y')}\n"]

        # Ensure articles are ordered by published_at descending to get the latest
        # and take up to 10 as requested by the user for specific categories.
        # For other categories, it will still take up to 10.
        articles_to_summarize = articles.order_by('-published_at')[:10]

        for article in articles_to_summarize:
            summary_parts.append(f"‚Ä¢ {article.title}")
            if article.price:
                summary_parts.append(
                    f"  ‡∏£‡∏≤‡∏Ñ‡∏≤: {article.price:,.2f}"
                )
                if article.change_percent:
                    summary_parts.append(f"  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {article.change_percent:.2f}%")
            
            if article.ai_summary:
                summary_parts.append(f"  ‡∏™‡∏£‡∏∏‡∏õ: {article.ai_summary}")
            elif article.content: # Fallback to content if no AI summary
                summary_parts.append(f"  ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {article.content[:150]}...")

            summary_parts.append("") # Add an empty line for spacing

        return "\n".join(summary_parts)

    def _generate_full_report(self, report):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        full_report = f"""
üì∞ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - {report.report_date.strftime('%d/%m/%Y')}
{'='*80}

{report.stock_thai_summary or ''}

{'='*80}

{report.stock_foreign_summary or ''}

{'='*80}

{report.crypto_summary or ''}

{'='*80}

{report.gold_summary or ''}

{'='*80}

{report.tech_summary or ''}

{'='*80}

{report.football_summary or ''}

{'='*80}

ü§ñ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ RPA Bot Manager
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}
"""

        return full_report.strip()

    def send_report(self, report):
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Email, LINE, Telegram)"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            print("="*80)
            print("üì® ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô")
            print("="*80)
            print(report.full_report)
            print("="*80)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
            report.is_sent = True
            report.sent_at = timezone.now()
            report.save()

            return True

        except Exception as e:
            print(f"Error sending report: {e}")
            return False

    def summarize_with_ai(self, text, max_length=200):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI (‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI ‡∏´‡∏£‡∏∑‡∏≠ Local LLM)"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ
        if len(text) <= max_length:
            return text

        return text[:max_length] + "..."

    def translate_to_thai(self, text):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Translation API
        return text
