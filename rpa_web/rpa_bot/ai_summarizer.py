"""
AI Summarizer Service - ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI
"""
from datetime import datetime, date
from django.utils import timezone
from .models import NewsArticle, DailyReport
import os


class AISummarizerService:
    """Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡∏î‡πâ‡∏ß‡∏¢ AI"""

    def __init__(self):
        self.gemini_api_key = os.environ.get('GEMINI_API_KEY', '')
        self.use_gemini = bool(self.gemini_api_key)

    def summarize_article(self, article):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API ‡∏´‡∏£‡∏∑‡∏≠ Local LLM
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢

        try:
            content = article.content
            title = article.title

            # Basic summarization (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô AI model ‡πÑ‡∏î‡πâ)
            summary = f"{title}\n\n{content[:200]}..."

            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó article
            article.ai_summary = summary
            article.sentiment = self._analyze_sentiment(content)
            article.save()

            return summary

        except Exception as e:
            print(f"Error summarizing article: {e}")
            return None

    def _analyze_sentiment(self, text):
        """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå sentiment ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢"""
        # TODO: ‡πÉ‡∏ä‡πâ AI model ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö sentiment analysis

        positive_words = ['‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô', '‡∏Å‡∏≥‡πÑ‡∏£', '‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï', 'up', 'gain', 'profit', 'growth']
        negative_words = ['‡∏•‡∏î‡∏•‡∏á', '‡πÅ‡∏¢‡πà‡∏•‡∏á', '‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô', '‡∏ï‡∏Å', 'down', 'loss', 'decline', 'fall']

        text_lower = text.lower()

        positive_count = sum(1 for word in positive_words if word in text_lower)
        negative_count = sum(1 for word in negative_words if word in text_lower)

        if positive_count > negative_count:
            return 'positive'
        elif negative_count > positive_count:
            return 'negative'
        else:
            return 'neutral'

    def generate_daily_report(self, report_date=None):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô"""
        if report_date is None:
            report_date = date.today()

        try:
            # ‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á DailyReport
            report, created = DailyReport.objects.get_or_create(
                report_date=report_date
            )

            # ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
            today_start = timezone.make_aware(datetime.combine(report_date, datetime.min.time()))
            today_end = timezone.make_aware(datetime.combine(report_date, datetime.max.time()))

            articles = NewsArticle.objects.filter(
                published_at__range=(today_start, today_end)
            )

            # ‡πÅ‡∏¢‡∏Å‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î
            stock_thai_articles = articles.filter(source__category='stock_thai')
            stock_us_articles = articles.filter(source__category='stock_us')
            stock_europe_articles = articles.filter(source__category='stock_europe')
            stock_china_articles = articles.filter(source__category='stock_china')
            crypto_articles = articles.filter(source__category='crypto')
            gold_articles = articles.filter(source__category='gold')
            tech_articles = articles.filter(source__category__in=['tech_ai', 'tech_hardware', 'tech_software'])
            football_articles = articles.filter(source__category='football')

            # ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î
            report.stock_thai_summary = self._summarize_category(
                stock_thai_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢ - 10 ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            )

            report.stock_us_summary = self._summarize_category(
                stock_us_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤ - 10 ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            )

            report.stock_europe_summary = self._summarize_category(
                stock_europe_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏∏‡πÇ‡∏£‡∏õ - 10 ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            )

            report.stock_china_summary = self._summarize_category(
                stock_china_articles,
                '‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏µ‡∏ô - 10 ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î'
            )

            report.crypto_summary = self._summarize_category(
                crypto_articles,
                'Bitcoin ‡πÅ‡∏•‡∏∞ Cryptocurrency'
            )

            report.gold_summary = self._summarize_category(
                gold_articles,
                '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥'
            )

            report.tech_summary = self._summarize_category(
                tech_articles,
                '‡∏Ç‡πà‡∏≤‡∏ß Technology'
            )

            report.football_summary = self._summarize_category(
                football_articles,
                '‡∏Ç‡πà‡∏≤‡∏ß Football'
            )

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°
            report.full_report = self._generate_full_report(report)

            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤ report
            report.articles.set(articles)

            report.is_completed = True
            report.save()

            return report

        except Exception as e:
            print(f"Error generating daily report: {e}")
            return None

    def _summarize_category(self, articles, category_name):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        if not articles.exists():
            return f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•{category_name}‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"

        summary_parts = [f"üìä {category_name} - ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date.today().strftime('%d/%m/%Y')}\n"]

        # Ensure articles are ordered by published_at descending to get the latest
        # and take up to 10 as requested by the user for specific categories.
        # For other categories, it will still take up to 10.
        articles_to_summarize = articles.order_by('-published_at')[:10]

        for article in articles_to_summarize:
            summary_parts.append(f"‚Ä¢ {article.title}")
            if article.price:
                summary_parts.append(
                    f"  ‡∏£‡∏≤‡∏Ñ‡∏≤: {article.price:,.2f}"
                )
                if article.change_percent:
                    summary_parts.append(f"  ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {article.change_percent:.2f}%")
            
            if article.ai_summary:
                summary_parts.append(f"  ‡∏™‡∏£‡∏∏‡∏õ: {article.ai_summary}")
            elif article.content: # Fallback to content if no AI summary
                summary_parts.append(f"  ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {article.content[:150]}...")

            summary_parts.append("") # Add an empty line for spacing

        return "\n".join(summary_parts)

    def _generate_full_report(self, report):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ï‡πá‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        full_report = f"""
üì∞ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πà‡∏≤‡∏ß‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô - {report.report_date.strftime('%d/%m/%Y')}
{'='*80}

{report.stock_thai_summary or ''}

{'='*80}

{report.stock_us_summary or ''}

{'='*80}

{report.stock_europe_summary or ''}

{'='*80}

{report.stock_china_summary or ''}

{'='*80}

{report.crypto_summary or ''}

{'='*80}

{report.gold_summary or ''}

{'='*80}

{report.tech_summary or ''}

{'='*80}

{report.football_summary or ''}

{'='*80}

ü§ñ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ RPA Bot Manager
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {timezone.now().strftime('%d/%m/%Y %H:%M:%S')}
"""

        return full_report.strip()

    def send_report(self, report):
        """‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô (Email, LINE, Telegram)"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

        try:
            # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            print("="*80)
            print("üì® ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô")
            print("="*80)
            print(report.full_report)
            print("="*80)

            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
            report.is_sent = True
            report.sent_at = timezone.now()
            report.save()

            return True

        except Exception as e:
            print(f"Error sending report: {e}")
            return False

    def summarize_with_ai(self, text, max_length=200):
        """‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ AI (‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI ‡∏´‡∏£‡∏∑‡∏≠ Local LLM)"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö OpenAI API

        # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÜ
        if len(text) <= max_length:
            return text

        return text[:max_length] + "..."

    def translate_to_thai(self, text):
        """‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢"""
        # TODO: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Translation API
        return text

    def generate_detailed_analysis(self, article):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡πâ‡∏ß‡∏¢ Gemini AI"""
        if not self.use_gemini:
            return self._generate_basic_analysis(article)

        try:
            import google.generativeai as genai

            # Configure Gemini API
            genai.configure(api_key=self.gemini_api_key)
            model = genai.GenerativeModel('gemini-2.0-flash-exp')

            # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            prompt = self._create_analysis_prompt(article)

            # Generate analysis
            response = model.generate_content(prompt)

            # Format the report
            analysis_report = self._format_analysis_report(
                article=article,
                analysis_text=response.text,
                model_name='gemini-2.0-flash-exp'
            )

            return analysis_report

        except Exception as e:
            print(f"Error generating Gemini analysis: {e}")
            return self._generate_basic_analysis(article)

    def _create_analysis_prompt(self, article):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        category = article.source.category
        title = article.title
        content = article.content
        price = article.price
        change = article.change
        change_percent = article.change_percent

        base_info = f"""
‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß: {title}
‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {content}
"""

        if price:
            base_info += f"""
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {price}
‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {change if change else 'N/A'}
% ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {change_percent if change_percent else 'N/A'}%
"""

        # Prompts ‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        if 'stock' in category:
            market_name = {
                'stock_thai': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡πÑ‡∏ó‡∏¢',
                'stock_us': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤',
                'stock_europe': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏¢‡∏∏‡πÇ‡∏£‡∏õ',
                'stock_china': '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏à‡∏µ‡∏ô'
            }.get(category, '‡∏ï‡∏•‡∏≤‡∏î‡∏´‡∏∏‡πâ‡∏ô')

            prompt = f"""{base_info}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå{market_name}‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:

### **1. ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ (Executive Summary)**
- ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

### **2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á**
- ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
- ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤

### **3. ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (Fundamentals)**
- ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏ï‡∏•‡∏≤‡∏î
- ‡∏ú‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£

### **4. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ (Technical Analysis)**
- ‡πÅ‡∏ô‡∏ß‡∏£‡∏±‡∏ö-‡πÅ‡∏ô‡∏ß‡∏ï‡πâ‡∏≤‡∏ô
- ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤

### **5. ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå**
- ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (1-3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
- ‡∏£‡∏∞‡∏¢‡∏∞‡∏Å‡∏•‡∏≤‡∏á (6-12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
- ‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß

### **6. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á**
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á

### **7. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô**
- ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- ‡∏à‡∏∏‡∏î‡πÄ‡∏Ç‡πâ‡∏≤-‡∏≠‡∏≠‡∏Å

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"""

        elif category == 'crypto':
            prompt = f"""{base_info}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Cryptocurrency ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:

### **1. ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£**
- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ï‡∏•‡∏≤‡∏î Crypto ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

### **2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏£‡∏≤‡∏Ñ‡∏≤**
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
- Market Cap ‡πÅ‡∏•‡∏∞ Volume

### **3. ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô**
- ‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- Adoption ‡πÅ‡∏•‡∏∞ Regulations

### **4. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå On-Chain**
- Whale Activity
- Network Activity

### **5. ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå**
- ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô, ‡∏Å‡∏•‡∏≤‡∏á, ‡∏¢‡∏≤‡∏ß

### **6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á**
- Volatility
- Regulatory Risk
- Security Risk

### **7. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**
- ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô
- Risk Management

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""

        elif 'tech' in category or category in ['ev_car', 'rocket_space']:
            tech_type = {
                'tech_ai': 'AI ‡πÅ‡∏•‡∏∞ Machine Learning',
                'tech_hardware': 'Hardware ‡πÅ‡∏•‡∏∞ Semiconductor',
                'tech_software': 'Software ‡πÅ‡∏•‡∏∞ Cloud',
                'ev_car': '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (EV)',
                'rocket_space': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏≠‡∏ß‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏à‡∏£‡∏ß‡∏î'
            }.get(category, '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ')

            prompt = f"""{base_info}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß{tech_type}‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:

### **1. ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£**
- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

### **2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ**
- ‡∏ô‡∏ß‡∏±‡∏ï‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÉ‡∏´‡∏°‡πà
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏≤‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ

### **3. ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°**
- Impact ‡∏ï‡πà‡∏≠ Market
- ‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô

### **4. ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à**
- Business Opportunities
- Market Growth

### **5. ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï**
- Future Trends
- Predictions

### **6. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡πâ‡∏≤‡∏ó‡∏≤‡∏¢**
- Technical Challenges
- Adoption Barriers

### **7. ‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞**
- Key Takeaways
- Recommendations

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û"""

        elif category == 'football':
            prompt = f"""{base_info}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:

### **1. ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πà‡∏≤‡∏ß**
- ‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç

### **2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå**
- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°/‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô
- ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô

### **3. ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•**
- ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
- ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏Å‡∏±‡∏ô

### **4. ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö**
- Impact ‡∏ï‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
- ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô

### **5. ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå**
- ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏ô‡∏∏‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"""

        else:  # gold ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            prompt = f"""{base_info}

‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πà‡∏≤‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤:

### **1. ‡∏ö‡∏ó‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£**
- ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå

### **2. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå**
- ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
- ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

### **3. ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö**
- Impact Analysis

### **4. ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°**
- ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

### **5. ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á**
- Risks and Warnings

### **6. ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥**
- Recommendations

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""

        return prompt

    def _format_analysis_report(self, article, analysis_text, model_name):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        current_time = timezone.now()

        report = f"""================================================================================
ü§ñ Stock Bot Gemini AI - Text Analysis Report
================================================================================

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {current_time.strftime('%Y-%m-%d %H:%M:%S')}
ü§ñ AI Model: {model_name}
üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {article.source.get_category_display()}
üì∞ ‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {article.source.name}

================================================================================
üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß:
================================================================================
{article.title}

================================================================================
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á:
================================================================================
"""

        if article.price:
            report += f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: {article.price:,.2f}\n"
            if article.change:
                symbol = "üìà" if article.change >= 0 else "üìâ"
                report += f"{symbol} ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {article.change:+,.2f}\n"
            if article.change_percent:
                symbol = "üìà" if article.change_percent >= 0 else "üìâ"
                report += f"{symbol} % ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á: {article.change_percent:+.2f}%\n"
        else:
            report += "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤\n"

        report += f"""
================================================================================
üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÇ‡∏î‡∏¢ AI:
================================================================================
{analysis_text}

================================================================================
ü§ñ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ RPA Bot Manager with Gemini AI
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: {current_time.strftime('%d/%m/%Y %H:%M:%S')}
================================================================================
"""

        return report

    def _generate_basic_analysis(self, article):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AI)"""
        current_time = timezone.now()

        report = f"""================================================================================
üìä Basic Analysis Report
================================================================================

üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {current_time.strftime('%Y-%m-%d %H:%M:%S')}
üìã ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {article.source.get_category_display()}

================================================================================
üìù ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß:
================================================================================
{article.title}

================================================================================
üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
================================================================================
{article.content}

================================================================================
üí° ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:
================================================================================
‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Gemini API Key
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GEMINI_API_KEY ‡πÉ‡∏ô environment variables

================================================================================
"""

        return report
